default_platform(:android)

platform :android do
  # Helper lane to get version information
  lane :get_version_info do
    version_name = ENV["VERSION_NAME"]
    version_code = ENV["VERSION_CODE"]

    unless version_name && version_code
      # Generate version info if not provided
      tag_date = Time.now.strftime("%Y.%m.%d")
      tag_prefix = ENV["TAG_PREFIX"] || "Debug-"
      base_tag = tag_date
      count = 0
      full_tag = "#{tag_prefix}#{base_tag}.#{count}"

      # Fetch tags from remote, ignore errors from rejected tags
      sh("git fetch --tags || true")
     
      # Get list of existing tags
      existing_tags = sh("git tag -l", log: false).split("\n")

      # Find next available tag
      # Use a safer approach to check if tag exists
      tag_exists = true
      while tag_exists
        # Check if tag exists locally
        tag_exists = existing_tags.include?(full_tag)
        
        if tag_exists
          UI.message("Tag #{full_tag} already exists, trying next...")
          count += 1
          full_tag = "#{tag_prefix}#{base_tag}.#{count}"
        else
          UI.success("Found available tag: #{full_tag}")
        end
      end

      version_name = full_tag
      version_code = "#{base_tag}.#{count}"
    end

    # Don't use explicit return in Fastlane, just make this the last expression
    { version_name: version_name, version_code: version_code }
  end

  # Helper to configure GitHub access with token
  lane :setup_github_token do
    UI.message("Setting up GitHub token authentication")
    
    github_token = ENV["GH_TOKEN"]

    if github_token
      UI.message("GitHub token found, length: #{github_token.length}")
      
      # Create a simple .netrc file for Git authentication
      sh("echo 'machine github.com login #{github_token} password x-oauth-basic' > ~/.netrc")
      sh("chmod 600 ~/.netrc")
      
      # Set environment variables to help Flutter find private repos
      ENV["FLUTTER_GIT_URL"] = "https://#{github_token}@github.com/"
      
      # Simple test to verify the token works
      UI.message("Testing token access...")
      test_cmd = "curl -s -o /dev/null -w '%{http_code}' -H 'Authorization: token #{github_token}' https://api.github.com/user"
      status_code = sh(test_cmd)
      
      if status_code == "200"
        UI.success("✅ GitHub token is working correctly!")
      else
        UI.error("❌ GitHub token authentication failed! Status code: #{status_code}")
      end
      
      # Clone activity_tracking repo directly
      UI.message("Setting up direct access to the private repository...")
      setup_repo_cmd = "rm -rf /tmp/activity_tracking && " + 
                      "git clone https://#{github_token}@github.com/Jozys/activity_tracking.git /tmp/activity_tracking && " +
                      "mkdir -p ../.pub-cache/git && " +
                      "cp -R /tmp/activity_tracking ../.pub-cache/git/activity_tracking"
      sh(setup_repo_cmd)
      UI.success("✅ Repository cloned and prepared for Flutter!")
    else
      UI.important("No GitHub token provided, private repositories may not be accessible")
    end
  end

  desc "Build debug APK"
  lane :buildDebug do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    setup_github_token
    
    # Ensure Flutter dependencies are up-to-date
    UI.message("Running Flutter pub get...")
    sh("cd .. && flutter pub get")

    # Build debug APK
    sh("cd .. && flutter build apk --debug")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp ../../build/app/outputs/apk/debug/movetopia-debug.apk build/outputs/movetopia-debug.apk")

    # Output the path to the debug APK
    UI.success("Debug APK built at: android/fastlane/build/outputs/movetopia-debug.apk (Package: de.movetopia.debug)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

  desc "Build release APK"
  lane :buildRelease do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    setup_github_token
    
    # Ensure Flutter dependencies are up-to-date
    UI.message("Running Flutter pub get...")
    sh("cd .. && flutter pub get")

    # Build release APK
    sh("cd .. && flutter build apk --release")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp ../../build/app/outputs/apk/release/movetopia-release.apk build/outputs/movetopia-release.apk")

    # Output the path to the release APK
    UI.success("Release APK built at: android/fastlane/build/outputs/movetopia-release.apk (Package: de.movetopia)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

#   desc "Build release APK and upload to Play Store beta track"
#   lane :buildAndPublishBeta do
#     # Ensure Flutter dependencies are up-to-date
#     sh("cd .. && flutter pub get")
#
#     # Build release App Bundle
#     sh("cd .. && flutter build appbundle --release")
#
#     # Upload to Play Store beta track
#     upload_to_play_store(
#       track: 'beta',
#       aab: "../../build/app/outputs/bundle/release/app-release.aab",
#       skip_upload_metadata: true,
#       skip_upload_images: true,
#       skip_upload_screenshots: true,
#     )
#
#     UI.success("App Bundle uploaded to Play Store beta track (Package: de.movetopia)")
#   end
end