default_platform(:android)

platform :android do
  # Helper lane to get version information
  lane :get_version_info do
    version_name = ENV["VERSION_NAME"]
    version_code = ENV["VERSION_CODE"]

    unless version_name && version_code
      # Generate version info if not provided
      tag_date = Time.now.strftime("%Y.%m.%d")
      tag_prefix = ENV["TAG_PREFIX"] || "Debug-"
      base_tag = tag_date
      count = 0
      full_tag = "#{tag_prefix}#{base_tag}.#{count}"

      # Fetch tags from remote, ignore errors from rejected tags
      sh("git fetch --tags || true")
     
      # Get list of existing tags
      existing_tags = sh("git tag -l", log: false).split("\n")

      # Find next available tag
      # Use a safer approach to check if tag exists
      tag_exists = true
      while tag_exists
        # Check if tag exists locally
        tag_exists = existing_tags.include?(full_tag)
        
        if tag_exists
          UI.message("Tag #{full_tag} already exists, trying next...")
          count += 1
          full_tag = "#{tag_prefix}#{base_tag}.#{count}"
        else
          UI.success("Found available tag: #{full_tag}")
        end
      end

      version_name = full_tag
      version_code = "#{base_tag}.#{count}"
    end

    # Don't use explicit return in Fastlane, just make this the last expression
    { version_name: version_name, version_code: version_code }
  end

  # Helper to configure GitHub access with token
  lane :setup_github_token do
    if ENV["CI"]
      UI.message("CI environment detected, setting up GitHub token authentication")
      
      github_token = ENV["GH_TOKEN"]
      
      if github_token
        UI.message("GitHub token found, length: #{github_token.length}")
        
        # Create a .netrc file for Git authentication
        sh("echo 'machine github.com login #{github_token} password x-oauth-basic' > ~/.netrc")
        sh("chmod 600 ~/.netrc")
        
        # Configure git to use https instead of git protocol (local config only)
        sh("git config url.https://github.com/.insteadOf git://github.com/")
        
        # Test the configuration with a simple API call
        begin
          UI.message("Testing token access...")
          status_code = sh("curl -s -o /dev/null -w '%{http_code}' -H 'Authorization: token #{github_token}' https://api.github.com/user", log: false)
          
          if status_code == "200"
            UI.success("✅ GitHub token is valid!")
          else
            UI.error("❌ GitHub token authentication failed! Status code: #{status_code}")
          end
        rescue => e
          UI.error("❌ Token verification failed: #{e.message}")
        end
        
        UI.success("GitHub authentication set up. Flutter pub get will now be able to access private repositories.")
      else
        UI.important("No GitHub token provided, private repositories may not be accessible")
      end
    else
      UI.message("Not running in CI environment, skipping GitHub token setup")
    end
  end

  desc "Build debug APK"
  lane :buildDebug do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    if ENV["CI"]
      setup_github_token
    end
    
    # Navigate to project root for Flutter commands
    proj_root = File.expand_path("../..", Dir.pwd)
    
    # Ensure Flutter dependencies are up-to-date
    UI.message("Running Flutter pub get in #{proj_root}...")
    begin
      sh("cd #{proj_root} && flutter pub get")
    rescue => e
      UI.error("Flutter pub get failed: #{e.message}")
      UI.message("Trying with fallback...")
      sh("cd #{proj_root} && flutter pub cache clean")
      sh("cd #{proj_root} && flutter pub get")
    end

    # Build debug APK
    UI.message("Building Debug APK...")
    sh("cd #{proj_root} && flutter build apk --debug")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp #{proj_root}/build/app/outputs/apk/debug/app-debug.apk build/outputs/movetopia-debug.apk || cp #{proj_root}/build/app/outputs/flutter-apk/app-debug.apk build/outputs/movetopia-debug.apk")

    # Output the path to the debug APK
    UI.success("Debug APK built at: android/fastlane/build/outputs/movetopia-debug.apk (Package: de.movetopia.debug)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

  desc "Build release APK"
  lane :buildRelease do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    if ENV["CI"]
      setup_github_token
    end
    
    # Navigate to project root for Flutter commands
    proj_root = File.expand_path("../..", Dir.pwd)
    
    # Ensure Flutter dependencies are up-to-date
    UI.message("Running Flutter pub get in #{proj_root}...")
    begin
      sh("cd #{proj_root} && flutter pub get")
    rescue => e
      UI.error("Flutter pub get failed: #{e.message}")
      UI.message("Trying with fallback...")
      sh("cd #{proj_root} && flutter pub cache clean")
      sh("cd #{proj_root} && flutter pub get")
    end

    # Build release APK
    UI.message("Building Release APK...")
    sh("cd #{proj_root} && flutter build apk --release")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp #{proj_root}/build/app/outputs/apk/release/app-release.apk build/outputs/movetopia-release.apk || cp #{proj_root}/build/app/outputs/flutter-apk/app-release.apk build/outputs/movetopia-release.apk")

    # Output the path to the release APK
    UI.success("Release APK built at: android/fastlane/build/outputs/movetopia-release.apk (Package: de.movetopia)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

#   desc "Build release APK and upload to Play Store beta track"
#   lane :buildAndPublishBeta do
#     # Ensure Flutter dependencies are up-to-date
#     sh("cd .. && flutter pub get")
#
#     # Build release App Bundle
#     sh("cd .. && flutter build appbundle --release")
#
#     # Upload to Play Store beta track
#     upload_to_play_store(
#       track: 'beta',
#       aab: "../../build/app/outputs/bundle/release/app-release.aab",
#       skip_upload_metadata: true,
#       skip_upload_images: true,
#       skip_upload_screenshots: true,
#     )
#
#     UI.success("App Bundle uploaded to Play Store beta track (Package: de.movetopia)")
#   end
end