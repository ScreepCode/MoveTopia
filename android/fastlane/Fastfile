default_platform(:android)

platform :android do
  # Helper lane to get version information
  lane :get_version_info do
    version_name = ENV["VERSION_NAME"]
    version_code = ENV["VERSION_CODE"]

    unless version_name && version_code
      # Generate version info if not provided
      tag_date = Time.now.strftime("%Y.%m.%d")
      tag_prefix = ENV["TAG_PREFIX"] || "Debug-"
      base_tag = tag_date
      count = 0
      full_tag = "#{tag_prefix}#{base_tag}.#{count}"

      # Fetch tags from remote, ignore errors from rejected tags
      sh("git fetch --tags || true")
     
      # Get list of existing tags
      existing_tags = sh("git tag -l", log: false).split("\n")

      # Find next available tag
      # Use a safer approach to check if tag exists
      tag_exists = true
      while tag_exists
        # Check if tag exists locally
        tag_exists = existing_tags.include?(full_tag)
        
        if tag_exists
          UI.message("Tag #{full_tag} already exists, trying next...")
          count += 1
          full_tag = "#{tag_prefix}#{base_tag}.#{count}"
        else
          UI.success("Found available tag: #{full_tag}")
        end
      end

      version_name = full_tag
      version_code = "#{base_tag}.#{count}"
    end

    # Don't use explicit return in Fastlane, just make this the last expression
    { version_name: version_name, version_code: version_code }
  end

  # Helper to configure GitHub access with token
  lane :setup_github_token do
    UI.message("Setting up GitHub token authentication")
    
    github_token = ENV["GH_TOKEN"]
    proj_root = File.expand_path("../..", Dir.pwd)
    
    UI.message("Project root directory: #{proj_root}")

    if github_token
      UI.message("GitHub token found, length: #{github_token.length}")
      
      # Create a simple .netrc file for Git authentication
      sh("echo 'machine github.com login #{github_token} password x-oauth-basic' > ~/.netrc")
      sh("chmod 600 ~/.netrc")
      
      # Set environment variables to help Flutter find private repos
      ENV["FLUTTER_GIT_URL"] = "https://#{github_token}@github.com/"
      
      # Simple test to verify the token works
      begin
        UI.message("Testing token access...")
        status_code = sh("curl -s -o /dev/null -w '%{http_code}' -H 'Authorization: token #{github_token}' https://api.github.com/user", log: false)
        
        if status_code == "200"
          UI.success("✅ GitHub token is valid!")
        else
          UI.error("❌ GitHub token authentication failed! Status code: #{status_code}")
        end
      rescue => e
        UI.error("❌ Token verification failed: #{e.message}")
      end
      
      # Check for pubspec.yaml and pubspec.lock
      pubspec_yaml_path = "#{proj_root}/pubspec.yaml"
      pubspec_lock_path = "#{proj_root}/pubspec.lock"
      
      UI.message("Checking for Flutter files:")
      UI.message("pubspec.yaml path: #{pubspec_yaml_path}")
      UI.message("pubspec.lock path: #{pubspec_lock_path}")
      
      # Show directory structure for debugging
      UI.message("Directory structure:")
      sh("ls -la #{proj_root}")
      
      # Check if activity_tracking dependency exists in pubspec.yaml
      if File.exist?(pubspec_yaml_path)
        UI.success("✅ pubspec.yaml found")
        pubspec_content = File.read(pubspec_yaml_path)
        
        if pubspec_content.include?("activity_tracking")
          UI.message("Activity tracking dependency found in pubspec.yaml")
          
          # Extract the repository URL if possible
          repo_url_match = pubspec_content.match(/activity_tracking:.*url:\s*['"]([^'"]+)['"]/)
          repo_url = repo_url_match ? repo_url_match[1] : "https://github.com/Jozys/activity_tracking.git"
          UI.message("Repository URL: #{repo_url}")
          
          # Clone the repository directly
          begin
            sh("rm -rf /tmp/activity_tracking")
            sh("git clone https://#{github_token}@github.com/Jozys/activity_tracking.git /tmp/activity_tracking")
            UI.success("✅ Repository cloned successfully")
            
            # Set up the Flutter pub cache for the dependency
            pub_cache_dir = ENV["PUB_CACHE"] || "#{Dir.home}/.pub-cache"
            git_cache_dir = "#{pub_cache_dir}/git"
            UI.message("Setting up dependency in #{git_cache_dir}")
            
            # Create directories
            sh("mkdir -p #{git_cache_dir}")
            
            # Get the HEAD commit hash
            git_hash = sh("cd /tmp/activity_tracking && git rev-parse HEAD", log: false).strip
            
            # Setup dependency with correct paths
            sh("mkdir -p #{git_cache_dir}/activity_tracking-#{git_hash}")
            sh("cp -R /tmp/activity_tracking/. #{git_cache_dir}/activity_tracking-#{git_hash}/")
            
            # Create reference file
            sh("echo '#{git_hash} #{repo_url}' > #{git_cache_dir}/activity_tracking.git.info")
            
            UI.success("✅ Dependency set up successfully")
          rescue => e
            UI.error("Failed to set up dependency: #{e.message}")
          end
        else
          UI.message("No activity_tracking dependency found in pubspec.yaml")
        end
      else
        UI.important("⚠️ pubspec.yaml not found!")
      end
    else
      UI.important("No GitHub token provided, private repositories may not be accessible")
    end
  end

  desc "Build debug APK"
  lane :buildDebug do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    setup_github_token
    
    # Navigate to project root for Flutter commands
    proj_root = File.expand_path("../..", Dir.pwd)
    
    # Ensure Flutter dependencies are up-to-date
    UI.message("Running Flutter pub get in #{proj_root}...")
    begin
      sh("cd #{proj_root} && flutter pub get")
    rescue => e
      UI.error("Flutter pub get failed: #{e.message}")
      UI.message("Trying with fallback...")
      sh("cd #{proj_root} && flutter pub cache clean")
      sh("cd #{proj_root} && flutter pub get")
    end

    # Build debug APK
    UI.message("Building Debug APK...")
    sh("cd #{proj_root} && flutter build apk --debug")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp #{proj_root}/build/app/outputs/apk/debug/app-debug.apk build/outputs/movetopia-debug.apk || cp #{proj_root}/build/app/outputs/flutter-apk/app-debug.apk build/outputs/movetopia-debug.apk")

    # Output the path to the debug APK
    UI.success("Debug APK built at: android/fastlane/build/outputs/movetopia-debug.apk (Package: de.movetopia.debug)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

  desc "Build release APK"
  lane :buildRelease do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    setup_github_token
    
    # Navigate to project root for Flutter commands
    proj_root = File.expand_path("../..", Dir.pwd)
    
    # Ensure Flutter dependencies are up-to-date
    UI.message("Running Flutter pub get in #{proj_root}...")
    begin
      sh("cd #{proj_root} && flutter pub get")
    rescue => e
      UI.error("Flutter pub get failed: #{e.message}")
      UI.message("Trying with fallback...")
      sh("cd #{proj_root} && flutter pub cache clean")
      sh("cd #{proj_root} && flutter pub get")
    end

    # Build release APK
    UI.message("Building Release APK...")
    sh("cd #{proj_root} && flutter build apk --release")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp #{proj_root}/build/app/outputs/apk/release/app-release.apk build/outputs/movetopia-release.apk || cp #{proj_root}/build/app/outputs/flutter-apk/app-release.apk build/outputs/movetopia-release.apk")

    # Output the path to the release APK
    UI.success("Release APK built at: android/fastlane/build/outputs/movetopia-release.apk (Package: de.movetopia)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

#   desc "Build release APK and upload to Play Store beta track"
#   lane :buildAndPublishBeta do
#     # Ensure Flutter dependencies are up-to-date
#     sh("cd .. && flutter pub get")
#
#     # Build release App Bundle
#     sh("cd .. && flutter build appbundle --release")
#
#     # Upload to Play Store beta track
#     upload_to_play_store(
#       track: 'beta',
#       aab: "../../build/app/outputs/bundle/release/app-release.aab",
#       skip_upload_metadata: true,
#       skip_upload_images: true,
#       skip_upload_screenshots: true,
#     )
#
#     UI.success("App Bundle uploaded to Play Store beta track (Package: de.movetopia)")
#   end
end