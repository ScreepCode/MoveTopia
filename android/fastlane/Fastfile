default_platform(:android)

platform :android do
  # Helper lane to get version information
  lane :get_version_info do
    version_name = ENV["VERSION_NAME"]
    version_code = ENV["VERSION_CODE"]

    unless version_name && version_code
      # Generate version info if not provided
      tag_date = Time.now.strftime("%Y.%m.%d")
      tag_prefix = ENV["TAG_PREFIX"] || "Debug-"
      base_tag = tag_date
      count = 0
      full_tag = "#{tag_prefix}#{base_tag}.#{count}"

      # Fetch tags from remote, ignore errors from rejected tags
      sh("git fetch --tags || true")
     
      # Get list of existing tags
      existing_tags = sh("git tag -l", log: false).split("\n")

      # Find next available tag
      # Use a safer approach to check if tag exists
      tag_exists = true
      while tag_exists
        # Check if tag exists locally
        tag_exists = existing_tags.include?(full_tag)
        
        if tag_exists
          UI.message("Tag #{full_tag} already exists, trying next...")
          count += 1
          full_tag = "#{tag_prefix}#{base_tag}.#{count}"
        else
          UI.success("Found available tag: #{full_tag}")
        end
      end

      version_name = full_tag
      version_code = "#{base_tag}.#{count}"
    end

    # Don't use explicit return in Fastlane, just make this the last expression
    { version_name: version_name, version_code: version_code }
  end

  # Helper to configure GitHub access with token
  lane :setup_github_token do
    UI.message("Setting up GitHub token authentication")
    
    github_token = ENV["GH_TOKEN"]

    if github_token
      UI.message("GitHub token found, length: #{github_token.length}")
      
      # Create a simple .netrc file for Git authentication
      sh("echo 'machine github.com login #{github_token} password x-oauth-basic' > ~/.netrc")
      sh("chmod 600 ~/.netrc")
      
      # Show pubspec.yaml for debugging
      UI.message("Current pubspec.yaml:")
      sh("cat ../pubspec.yaml | grep activity_tracking || echo 'Not found'")
      
      # Check if the dependency is a git reference
      dependency_pattern = sh("cat ../pubspec.yaml | grep -A 5 'activity_tracking:' || echo 'Not found'", log: false)
      UI.message("Dependency pattern: #{dependency_pattern}")
      
      # Get pubspec.lock to find the exact commit hash
      UI.message("Looking for exact commit hash in pubspec.lock...")
      pubspec_lock = sh("cat ../pubspec.lock", log: false)
      
      # Extract commit hash from pubspec.lock if possible
      commit_hash = nil
      if pubspec_lock.include?("activity_tracking")
        match = pubspec_lock.match(/activity_tracking:.*?hash: ([a-f0-9]+)/)
        commit_hash = match[1] if match
      end
      
      UI.message("Found commit hash: #{commit_hash || 'None'}")
      
      # Directly set up the dependency using Git with token
      UI.message("Setting up direct Git access for Flutter private dependency...")
      
      # Clean previous clones
      sh("rm -rf /tmp/activity_tracking")
      
      # Clone the repository
      sh("git clone https://#{github_token}@github.com/Jozys/activity_tracking.git /tmp/activity_tracking")
      
      # If we have a commit hash, checkout that specific commit
      if commit_hash
        sh("cd /tmp/activity_tracking && git checkout #{commit_hash}")
      end
      
      # Prepare pub cache directory
      pub_cache_dir = ENV["PUB_CACHE"] || "#{Dir.home}/.pub-cache"
      git_cache_dir = "#{pub_cache_dir}/git"
      sh("mkdir -p #{git_cache_dir}")
      
      # Create the correct directory structure
      git_hash_dir = commit_hash || sh("cd /tmp/activity_tracking && git rev-parse HEAD", log: false).strip
      dependency_cache_dir = "#{git_cache_dir}/activity_tracking-#{git_hash_dir}"
      
      UI.message("Setting up dependency at: #{dependency_cache_dir}")
      sh("rm -rf '#{dependency_cache_dir}' && mkdir -p '#{dependency_cache_dir}'")
      sh("cp -R /tmp/activity_tracking/. '#{dependency_cache_dir}'")
      
      # Create a reference file for Flutter
      UI.message("Creating Flutter reference file...")
      reference_file = "#{git_cache_dir}/cached_git_ref.info"
      reference_content = "#{git_hash_dir} https://github.com/Jozys/activity_tracking.git"
      sh("echo '#{reference_content}' > '#{reference_file}'")
      
      # Set environment variables for Flutter
      ENV["PUB_CACHE"] = pub_cache_dir
      ENV["FLUTTER_GIT_URL"] = "https://#{github_token}@github.com/"
      
      # Test access to GitHub API
      UI.message("Testing token validity with GitHub API...")
      test_result = sh("curl -s -o /dev/null -w '%{http_code}' -H 'Authorization: token #{github_token}' https://api.github.com/user", log: false)
      
      if test_result == "200"
        UI.success("✅ GitHub token is valid!")
      else
        UI.error("❌ GitHub token failed authorization test! HTTP status: #{test_result}")
      end
      
      UI.success("Private repository dependency setup complete!")
    else
      UI.important("No GitHub token provided, private repositories may not be accessible")
    end
  end

  desc "Build debug APK"
  lane :buildDebug do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    setup_github_token
    
    # Ensure Flutter dependencies are up-to-date with extra debugging
    UI.message("Running Flutter pub get with verbose output...")
    begin
      sh("cd .. && flutter pub get --verbose")
    rescue => e
      UI.error("Flutter pub get failed: #{e.message}")
      UI.message("Checking dependency state...")
      sh("cd .. && flutter pub cache clean")
      sh("cd .. && flutter pub get --verbose")
    end

    # Build debug APK
    sh("cd .. && flutter build apk --debug")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp ../../build/app/outputs/apk/debug/movetopia-debug.apk build/outputs/movetopia-debug.apk")

    # Output the path to the debug APK
    UI.success("Debug APK built at: android/fastlane/build/outputs/movetopia-debug.apk (Package: de.movetopia.debug)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

  desc "Build release APK"
  lane :buildRelease do
    version_info = get_version_info
    
    # Setup GitHub token for private repositories
    setup_github_token
    
    # Ensure Flutter dependencies are up-to-date with extra debugging
    UI.message("Running Flutter pub get with verbose output...")
    begin
      sh("cd .. && flutter pub get --verbose")
    rescue => e
      UI.error("Flutter pub get failed: #{e.message}")
      UI.message("Checking dependency state...")
      sh("cd .. && flutter pub cache clean")
      sh("cd .. && flutter pub get --verbose")
    end

    # Build release APK
    sh("cd .. && flutter build apk --release")

    # Create output directory
    sh("mkdir -p build/outputs")

    # Copy the APK using the correct path
    sh("cp ../../build/app/outputs/apk/release/movetopia-release.apk build/outputs/movetopia-release.apk")

    # Output the path to the release APK
    UI.success("Release APK built at: android/fastlane/build/outputs/movetopia-release.apk (Package: de.movetopia)")
    UI.success("Version: #{version_info[:version_name]} (#{version_info[:version_code]})")
    
    # Return version info for GitHub Actions - make this the last expression
    version_info
  end

#   desc "Build release APK and upload to Play Store beta track"
#   lane :buildAndPublishBeta do
#     # Ensure Flutter dependencies are up-to-date
#     sh("cd .. && flutter pub get")
#
#     # Build release App Bundle
#     sh("cd .. && flutter build appbundle --release")
#
#     # Upload to Play Store beta track
#     upload_to_play_store(
#       track: 'beta',
#       aab: "../../build/app/outputs/bundle/release/app-release.aab",
#       skip_upload_metadata: true,
#       skip_upload_images: true,
#       skip_upload_screenshots: true,
#     )
#
#     UI.success("App Bundle uploaded to Play Store beta track (Package: de.movetopia)")
#   end
end