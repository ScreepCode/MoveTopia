default_platform(:android)

platform :android do
  # Helper lane to get version information based on date
  lane :get_version_info do
    # Generate version info if not provided
    date = Time.now.strftime("%Y.%m.%d")
    
    # Fetch tags from remote, ignore errors from rejected tags
    sh("git fetch --tags || true")
   
    # Get repository configuration for remote name
    repo_config = get_repo_config
    remote_name = repo_config["remote_name"] || "origin"
    
    # Find the highest hotfix number for today's date
    hotfix = 0
    version_pattern = /^#{date}\+(\d+)$/
    
    # Get all tags from the project and check if there's one for today
    UI.message("Checking for existing tags with pattern: #{version_pattern}")
    
    # Loop through potential tag names with increasing hotfix numbers
    # until we find one that doesn't exist yet
    tag_exists = true
    while tag_exists
      test_tag = "#{date}+#{hotfix}"
      UI.message("Checking if tag exists: #{test_tag}")
      
      # Use git_tag_exists to check remote for the tag
      tag_exists = git_tag_exists(
        tag: test_tag,
        remote: true,
        remote_name: remote_name
      )
      
      if tag_exists
        UI.message("Tag #{test_tag} already exists, incrementing hotfix number...")
        hotfix += 1
      else
        UI.success("Found available tag: #{test_tag}")
      end
    end
    
    # Format versions
    version_name = "#{date}+#{hotfix}"
    build_number = (Time.now.strftime("%Y%m%d").to_i * 100) + hotfix
    
    # Create Android-compatible versions
    # Android doesn't like the "+" in version names
    android_version_name = "#{date}.#{hotfix}"
    android_version_code = build_number
    
    # Export environment variables for GitHub Actions
    ENV["VERSION_NAME"] = version_name
    ENV["BUILD_NUMBER"] = build_number.to_s
    ENV["ANDROID_VERSION_NAME"] = android_version_name
    ENV["ANDROID_VERSION_CODE"] = android_version_code.to_s
    UI.message("Exporting environment variables: VERSION_NAME=#{version_name}, BUILD_NUMBER=#{build_number}")
    UI.message("Android versions: VERSION_NAME=#{android_version_name}, VERSION_CODE=#{android_version_code}")
    
    # Set output for GitHub Actions
    if ENV["GITHUB_OUTPUT"]
      sh("echo \"version_name=#{version_name}\" >> $GITHUB_OUTPUT") 
      sh("echo \"build_number=#{build_number}\" >> $GITHUB_OUTPUT")
      sh("echo \"android_version_name=#{android_version_name}\" >> $GITHUB_OUTPUT")
      sh("echo \"android_version_code=#{android_version_code}\" >> $GITHUB_OUTPUT")

      # Ensure the environment variables are also visible to the GitHub runner directly
      # This adds the variables to the environment for subsequent steps
      sh("echo \"VERSION_NAME=#{version_name}\" >> $GITHUB_ENV")
      sh("echo \"BUILD_NUMBER=#{build_number}\" >> $GITHUB_ENV")
      sh("echo \"ANDROID_VERSION_NAME=#{android_version_name}\" >> $GITHUB_ENV")
      sh("echo \"ANDROID_VERSION_CODE=#{android_version_code}\" >> $GITHUB_ENV")
    end
    
    UI.success("Generated version: #{version_name} (build_number: #{build_number})")
    
    # Don't use explicit return in Fastlane, just make this the last expression
    { 
      version_name: version_name, 
      build_number: build_number,
      android_version_name: android_version_name,
      android_version_code: android_version_code
    }
  end
  
  desc "Setup keystore properties from CI environment"
  lane :setup_keystore do
      # Check if we're running in a CI environment
      if ENV["CI"]
          UI.message("Running in CI environment, setting up keystore from secrets")
          
          # Create keystore file from base64 encoded string
          keystore_path = File.join(Dir.pwd, "..", "app", "keystore.jks")
          File.write(keystore_path, Base64.decode64(ENV["MT_KEYSTORE_BASE64"]))
          
          # Set environment variables for the keystore
          ENV["KEYSTORE_PATH"] = keystore_path
      else
          UI.message("Running locally, using local keystore configuration")
          # Local development setup
          ENV["KEYSTORE_PATH"] = ENV["MT_KEYSTORE_PATH"]
      end
      ENV["KEYSTORE_PASSWORD"] = ENV["MT_KEYSTORE_PASSWORD"]
      ENV["KEY_ALIAS"] = ENV["MT_KEY_ALIAS"]
      ENV["KEY_PASSWORD"] = ENV["MT_KEY_PASSWORD"]
  end

  # Helper to configure GitHub access with token
  lane :setup_github_token do
    if ENV["CI"]
      UI.message("CI environment detected, setting up GitHub token authentication")
      
      github_token = ENV["GH_TOKEN"]
      
      if github_token
        UI.message("GitHub token found, length: #{github_token.length}")
        
        # Create a .netrc file for Git authentication
        sh("echo 'machine github.com login #{github_token} password x-oauth-basic' > ~/.netrc")
        sh("chmod 600 ~/.netrc")
        
        # Configure git to use https instead of git protocol (local config only)
        sh("git config url.https://github.com/.insteadOf git://github.com/")
        
        # Test the configuration with a simple API call
        begin
          UI.message("Testing token access...")
          status_code = sh("curl -s -o /dev/null -w '%{http_code}' -H 'Authorization: token #{github_token}' https://api.github.com/user", log: false)
          
          if status_code == "200"
            UI.success("✅ GitHub token is valid!")
          else
            UI.error("❌ GitHub token authentication failed! Status code: #{status_code}")
          end
        rescue => e
          UI.error("❌ Token verification failed: #{e.message}")
        end
        
        UI.success("GitHub authentication set up. Flutter pub get will now be able to access private repositories.")
      else
        UI.important("No GitHub token provided, private repositories may not be accessible")
      end
    else
      UI.message("Not running in CI environment, skipping GitHub token setup")
    end
  end

  # Load repository configuration from file or environment
  lane :get_repo_config do
    repo_config_file = File.expand_path("../repo_config.json", Dir.pwd)
    repo_config = {}
    
    # Load from config file if it exists
    if File.exist?(repo_config_file)
      begin
        repo_config = JSON.parse(File.read(repo_config_file))
        UI.message("Loaded repository configuration from file")
      rescue => e
        UI.error("Failed to parse repo_config.json: #{e.message}")
      end
    else
      UI.message("No repo_config.json found, will use defaults or environment variables")
    end
    
    # Set default values if not specified in config
    repo_config["repository"] ||= ENV["GITHUB_REPOSITORY"]
    # Use release token explicitly, not the same as the GH_TOKEN used for repo access
    repo_config["remote_name"] ||= "origin"
    
    UI.message("Using repository: #{repo_config['repository']}, remote: #{repo_config['remote_name']}")
    repo_config
  end
  
  # Core lane to build APK
  private_lane :build_apk do |options|
    build_type = options[:build_type]
    version_info = options[:version_info]
    
    unless build_type == "debug" || build_type == "release"
      UI.user_error!("Build type must be 'debug' or 'release'")
    end
    
    unless version_info
      UI.user_error!("Version information is required")
    end
    
    # Extract version information
    version_name = version_info[:version_name]
    build_number = version_info[:build_number]
    android_version_name = version_info[:android_version_name]
    android_version_code = version_info[:android_version_code]
    
    # Setup GitHub token for private repositories if in CI
    if ENV["CI"]
      UI.message("Setting up GitHub token for private repository access")
      setup_github_token
    else
      UI.message("Running in local mode, assuming git is already configured")
    end
    
    # Navigate to project root for Flutter commands
    proj_root = File.expand_path("../..", Dir.pwd)
    
    # Update the local.properties file with version info
    local_properties_path = "#{proj_root}/android/local.properties"
    UI.message("Writing version to #{local_properties_path}")
    
    # Just write the version information directly to local.properties
    File.open(local_properties_path, 'w') do |file|
      file.puts "flutter.versionName=#{android_version_name}"
      file.puts "flutter.versionCode=#{android_version_code}"
    end
    
    # Ensure Flutter dependencies are up-to-date
    UI.message("Running Flutter pub get to fetch dependencies...")
    sh("cd #{proj_root} && flutter pub get")
    
    # Build APK - no need to specify version as it's in local.properties now
    UI.message("Building #{build_type} APK with versions:")
    UI.message("  App version: #{version_name} (#{build_number})")
    UI.message("  Android version: #{android_version_name} (#{android_version_code})")
    
    # Build with the correct flag format
    if build_type == "debug"
      sh("cd #{proj_root} && flutter build apk --debug --build-name=#{android_version_name} --build-number=#{android_version_code}")
    else
      sh("cd #{proj_root} && flutter build apk --release --build-name=#{android_version_name} --build-number=#{android_version_code}")
    end
    
    # Check if the build used the correct version
    UI.message("Checking built APK for version information")
    if ENV["CI"]
      # In CI environment, use aapt to extract version info from APK
      sh("cd #{proj_root} && pwd && ls -l build/app/outputs/apk/#{build_type}/")
      begin
        apk_path = "#{proj_root}/build/app/outputs/apk/#{build_type}/app-#{build_type}.apk"
        sh("which aapt2 || echo 'aapt2 not found'")
        output = sh("cd #{proj_root} && aapt2 dump badging build/app/outputs/apk/#{build_type}/app-#{build_type}.apk | grep versionName || echo 'Version info not found'")
        UI.message("APK version info: #{output}")
      rescue => e
        UI.important("Failed to check APK version: #{e.message}")
      end
    end
    
    # Create output directory
    sh("mkdir -p build/outputs")
    
    # Copy the APK using the correct path
    apk_path = "build/outputs/movetopia-#{build_type}.apk"
    sh("cp #{proj_root}/build/app/outputs/apk/#{build_type}/app-#{build_type}.apk #{apk_path} || cp #{proj_root}/build/app/outputs/flutter-apk/app-#{build_type}.apk #{apk_path}")
    
    # Return the APK path
    UI.success("#{build_type.capitalize} APK built at: android/fastlane/#{apk_path}")
    apk_path
  end

  private_lane :build_aab do |options|
    build_type = options[:build_type]
    version_info = options[:version_info]
  
    unless build_type == "release"
      UI.user_error!("Build type for AAB must be 'release'")
    end
  
    unless version_info
      UI.user_error!("Version information is required")
    end
  
    # Extract version information
    android_version_name = version_info[:android_version_name]
    android_version_code = version_info[:android_version_code]
  
    # Setup GitHub token for private repositories if in CI
    if ENV["CI"]
      UI.message("Setting up GitHub token for private repository access")
      setup_github_token
    else
      UI.message("Running in local mode, assuming git is already configured")
    end
  
    # Navigate to project root for Flutter commands
    proj_root = File.expand_path("../..", Dir.pwd)
  
    # Build AAB
    UI.message("Building app bundle with versions:")
    UI.message("  Android version: #{android_version_name} (#{android_version_code})")
    sh("cd #{proj_root} && flutter build appbundle --release --build-name=#{android_version_name} --build-number=#{android_version_code}")
  
    # Create output directory
    sh("mkdir -p build/outputs")
  
    # Copy the AAB
    aab_path = "build/outputs/movetopia-release.aab"
    sh("cp #{proj_root}/build/app/outputs/bundle/release/app-release.aab #{aab_path}")
  
    # Return the AAB path
    UI.success("App Bundle built at: android/fastlane/#{aab_path}")
    aab_path
  end

  # Helper to update version.dart file
  private_lane :update_version_dart do |options|
    version_info = options[:version_info]
    
    unless version_info
      UI.user_error!("Version information is required")
    end
    
    # Extract version information
    version_name = version_info[:version_name]
    build_number = version_info[:build_number]
    
    # Navigate to project root for Flutter commands
    proj_root = File.expand_path("../..", Dir.pwd)
    
    # Create version.dart file for the app
    version_file_path = "#{proj_root}/lib/version.dart"
    
    # Extract version parts
    version_parts = version_name.split('+')
    semantic_version = version_parts[0]
    hotfix = version_parts[1] || "0"
    
    version_file_content = <<-DART
// Generated file - do not modify manually
class AppVersion {
  static const String version = '#{semantic_version}';
  static const String hotfix = '#{hotfix}';
  static const String fullVersion = '#{version_name}';
  static const int buildNumber = #{build_number};
  static const String buildDate = '#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}';
}
DART
    
    UI.message("Writing version information to #{version_file_path}")
    File.write(version_file_path, version_file_content)
  end
  
  # 1. Basic debug build - just build APK without version, tag or release
  desc "Build debug APK without creating a release or tag"
  lane :build_debug do
    UI.message("Starting basic debug build")
    
    # Get version information
    version_info = get_version_info
    
    # Update version.dart file
    update_version_dart(version_info: version_info)
    
    # Build the APK
    apk_path = build_apk(
      build_type: "debug",
      version_info: version_info
    )
    
    UI.success("Debug APK built successfully")
    UI.important("Version information: name=#{version_info[:version_name]}, build=#{version_info[:build_number]}")
    
    # Return version info for GitHub Actions
    version_info
  end
  
  # 2. Debug build with versioning
  desc "Build debug APK with versioning"
  lane :build_debug_with_release do
    UI.message("Starting debug build with versioning")
    
    # Get version information
    UI.message("Generating version information...")
    version_info = get_version_info
    version_name = version_info[:version_name]
    build_number = version_info[:build_number]
    UI.message("Using version: #{version_name} (#{build_number})")
    
    # Update version.dart file
    update_version_dart(version_info: version_info)
    
    # Build the APK
    UI.message("Building debug APK...")
    apk_path = build_apk(
      build_type: "debug",
      version_info: version_info
    )
    
    UI.success("Debug APK built successfully with version #{version_name}")
    UI.important("Version information: name=#{version_name}, build=#{build_number}")
    
    # Return version info for GitHub Actions
    version_info
  end
  
  # 3. Basic release build - just build APK without version, tag or release
  desc "Build release APK without creating a release or tag"
  lane :build_release do
    UI.message("Starting basic release build")
    # Setup keystore properties
    setup_keystore
    
    # Get version information
    version_info = get_version_info
    
    # Update version.dart file
    update_version_dart(version_info: version_info)
 
    # Build the APK
    apk_path = build_apk(
      build_type: "release",
      version_info: version_info
    )
    
    UI.success("Release APK built successfully")
    UI.important("Version information: name=#{version_info[:version_name]}, build=#{version_info[:build_number]}")
    
    # Return version info for GitHub Actions
    version_info
  end

  # 4. Release assemble - build only AAB
  desc "Build release AAB with versioning"
  lane :assemble_release do
    UI.message("Starting release AAB build")

    # Setup keystore properties
    setup_keystore

    # Get version information
    UI.message("Generating version information...")
    version_info = get_version_info
    version_name = version_info[:version_name]
    build_number = version_info[:build_number]
    UI.message("Using version: #{version_name} (#{build_number})")

    # Update version.dart file
    update_version_dart(version_info: version_info)

    # Build the AAB
    UI.message("Building release AAB...")
    aab_path = build_aab(
      build_type: "release",
      version_info: version_info
    )

    UI.success("Release AAB built successfully with version #{version_name}")
    UI.important("Version information: name=#{version_name}, build=#{build_number}")

    # Return version info for GitHub Actions
    version_info
  end

  # 6. Combined release build for both APK and AAB
  desc "Build release APK and AAB with versioning in parallel"
  lane :build_release_and_deploy do |options|
    UI.message("Starting parallel release build (APK + AAB)")
    
    # Parse options for deployment
    deploy_to = options[:deploy_to]
    
    # Setup keystore properties
    setup_keystore

    # Get version information
    UI.message("Generating version information...")
    version_info = get_version_info
    version_name = version_info[:version_name]
    build_number = version_info[:build_number]
    UI.message("Using version: #{version_name} (#{build_number})")

    # Update version.dart file
    update_version_dart(version_info: version_info)

    # Create threads for parallel builds
    apk_thread = Thread.new do
      UI.message("Starting APK build thread...")
      apk_path = build_apk(
        build_type: "release",
        version_info: version_info
      )
      Thread.current[:path] = apk_path
    end

    aab_thread = Thread.new do
      UI.message("Starting AAB build thread...")
      aab_path = build_aab(
        build_type: "release",
        version_info: version_info
      )
      Thread.current[:path] = aab_path
    end

    # Wait for both builds to complete
    apk_thread.join
    aab_thread.join

    # Retrieve the paths
    apk_path = apk_thread[:path]
    aab_path = aab_thread[:path]

    UI.success("Release builds completed successfully with version #{version_name}")
    UI.important("Version information: name=#{version_name}, build=#{build_number}")
    UI.important("APK path: #{apk_path}")
    UI.important("AAB path: #{aab_path}")
    
    # Check if we should deploy to Google Play Store
    if deploy_to && ['internal', 'beta'].include?(deploy_to)
      UI.message("Deploying to Google Play #{deploy_to.capitalize} track")
      
      # Check if we have the necessary credentials
      if ENV['PLAYSTORE_JSON_KEY_PATH'].nil?
        UI.user_error!("Cannot deploy to Google Play Store: PLAYSTORE_JSON_KEY_PATH environment variable not set")
      end
      
      # Upload to the selected track
      upload_to_play_store(
        track: deploy_to,
        aab: aab_path,
        json_key: ENV['PLAYSTORE_JSON_KEY_PATH'],
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
      )
      
      UI.success("Successfully deployed to #{deploy_to.capitalize} track")
    end

    # Return version info for GitHub Actions
    version_info
  end

end